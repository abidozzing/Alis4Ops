@inherits LayoutComponentBase
@page "/dropdownnavbar"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Alis4Ops2024.Core
@using Alis4Ops2024.Models
@using Alis4Ops2024.Components.Layout
@*//This component should provide all parameters to GenerateQuestion.
Parameters provided to GenerateQuestion is according to the selected 
type of question from theDropDown Menu.
GenerateQuestion will generate the question.
It then provides all parameters that are needed to be displayed and 
selection of a suitable formatted component to use for the page.
*@
<PageTitle>DropdownNavbar</PageTitle>
@* <h3>DropdownNavbar</h3> *@
 
<nav class="navbar navbar-expand-lg navbar-light bg-light ">
    <div class="container-fluid" style="justify-items: flex-end;">
        <a class="navbar-brand"></a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavbar">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse justify-content-start @navbarCollapseCss">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown" id="navbarDropdownAdd" role="button"
                       @onclick='() => ToggleDropdown("Add")' aria-expanded="@isAddDropdownOpen">
                        Add
                    </a>
@*                     <ul class="dropdown-menu dropdown-menu-left" aria-labelledby="navbarDropdownAdd" style="display: @addDropdownDisplay">
                        @foreach (var item in AddItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Add"))">@item</a></li>
                        }
                    </ul> *@
                </li>
@*                 <li class="nav-item dropdown">
                    <a class="nav-link dropdown" id="navbarDropdownAddMissing" role="button"
                       @onclick='() => ToggleDropdown("Add Missing")' aria-expanded="@isAddMissingDropdownOpen">
                        Add_Missing
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdownAddMissing" style="display: @addMissingDropdownDisplay">
                        @foreach (var item in AddMissingItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Add Missing"))">@item</a></li>
                        }
                    </ul>
                </li> *@
                @* <li class="nav-item dropdown"> *@
                    <a class="nav-link dropdown-toggle" id="navbarDropdownSubtract" role="button"
                       @onclick='() => ToggleDropdown("Subtract")' aria-expanded="@isSubtractDropdownOpen">
                        Subtract
                    </a>
@*                     <ul class="dropdown-menu" aria-labelledby="navbarDropdownSubtract" style="display: @subtractDropdownDisplay">
                        @foreach (var item in SubtractItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Subtract"))">@item</a></li>
                        }
                    </ul> *@
                @* </li> *@
@*                 <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownSubtractMissing" role="button"
                       @onclick='() => ToggleDropdown("Subtract Missing")' aria-expanded="@isSubtractMissingDropdownOpen">
                        Subtract_Missing
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdownSubtractMissing" style="display: @subtractMissingDropdownDisplay">
                        @foreach (var item in SubtractMissingItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Subtract Missing"))">@item</a></li>
                        }
                    </ul>
                </li> *@
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownMultiply" role="button"
                       @onclick='() => ToggleDropdown("Multiply")' aria-expanded="@isMultiplyDropdownOpen">
                        Multiply
                    </a>
@*                     <ul class="dropdown-menu" aria-labelledby="navbarDropdownMultiply" style="display: @multiplyDropdownDisplay">
                        @foreach (var item in MultiplyItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Multiply"))">@item</a></li>
                        }
                    </ul> *@
                </li>
@*                 <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownMultiplyMissing" role="button"
                       @onclick='() => ToggleDropdown("Multiply Missing")' aria-expanded="@isMultiplyMissingDropdownOpen">
                        Multiply_Missing
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdownMultiplyMissing" style="display: @multiplyMissingDropdownDisplay">
                        @foreach (var item in MultiplyMissingItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Multiply Missing"))">@item</a></li>
                        }
                    </ul>
                </li> *@
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownDivide" role="button"
                       @onclick='() => ToggleDropdown("Divide")' aria-expanded="@isDivideDropdownOpen">
                        Divide
                    </a>
@*                     <ul class="dropdown-menu" aria-labelledby="navbarDropdownDivide" style="display: @divideDropdownDisplay">
                        @foreach (var item in DivideItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Divide"))">@item</a></li>
                        }
                    </ul> *@
                </li>
@*                 <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownDivideMissing" role="button"
                       @onclick='() => ToggleDropdown("Divide Missing")' aria-expanded="@isDivideMissingDropdownOpen">
                        Divide_Missing
                    </a> *@
@*                     <ul class="dropdown-menu" aria-labelledby="navbarDropdownDivideMissing" style="display: @divideMissingDropdownDisplay">
                        @foreach (var item in DivideMissingItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Divide Missing"))">@item</a></li>
                        }
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownMixed4Ops" role="button"
                       @onclick='() => ToggleDropdown("Mixed4Ops")' aria-expanded="@isMixed4OpsDropdownOpen">
                        Mixed4Ops
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdownMixed4Ops" style="display: @mixed4OpsDropdownDisplay">
                        @foreach (var item in Mixed4OpsItems)
                        {
                            <li><a class="dropdown-item" @onclick="@(e => HandleDropdownItemClick(item,"Mixed4Ops"))">@item</a></li>
                        }
                    </ul>
                </li> *@
            </ul>
        </div>
        <div>

            

        </div>
    </div>

    @* Item: <strong>@ClickedMenuItem</strong> | Operator: <strong>@Operator</strong> | Upper Range: <strong>@UpperRange</strong> | Lower Range: <strong>@LowerRange</strong> | Answer: <strong>@Question.Answer</strong> *@

</nav>


@* <p>Item:@ClickedMenuItem | Operator:@Operator | Upper Range:@UpperRange | Lower Range:@LowerRange | Answer:@Question.Answer</p> *@


@code {

    [Inject]
    private IQuestionGeneratorService QuestionGenerator { get; set; }
    [Parameter]
    public BaseQuestion Question { get; set; }
    // public string randomOperation;
    protected override void OnInitialized()
    {
        Question = new BaseQuestion();

        // string[] operations = { "Add", "Subtract", "Multiply", "Divide", "Add_Missing", "Subtract_Missing", "Multiply_Missing", "Divide_Missing" };

        // // Randomly chosen operation

        // {
        //     // Create a Random object
        //     Random random = new Random();

        //     // Generate a random index
        //     int randomIndex = random.Next(operations.Length);

        //     // Get the operation at the random index
        //     randomOperation = operations[randomIndex];
        // }
    }

    // private List<string> AddItems = new List<string>
    // {
    //     "0-5", "0-10", "Number Bond for 10", "0-20", "Number Bond for 20", "10-50", "10-100", "100-1000", "1000-10000" 
    // };
    // private List<string> AddMissingItems = new List<string>
    // {
    //     "0-5", "0-10", "Number Bond for 10", "0-20", "Number Bond for 20", "10-50", "10-100", "100-1000", "1000-10000"
    // };

    // private List<string> SubtractItems = new List<string>
    // {
    //     "0-5", "0-10", "Subtract from 10", "0-20", "Subtract from 20", "10-50", "50-100", "100-1000", "1000-10000"
    // };
    // private List<string> SubtractMissingItems = new List<string>
    // {
    //     "0-5", "0-10", "Subtract from 10", "0-20", "Subtract from 20", "10-50", "50-100", "100-1000", "1000-10000"
    // };
    // private List<string> MultiplyItems = new List<string>
    // {
    //     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11","12"
    // };
    // private List<string> MultiplyMissingItems = new List<string>
    // {
    //     "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11","12"
    // };
    // private List<string> DivideItems = new List<string>
    // {
    //    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11","12"
    // };
    // private List<string> DivideMissingItems = new List<string>
    // {
    //    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11","12"
    // };
    // private List<string> Mixed4OpsItems = new List<string>
    // {
    //    "Level1", "Level2", "Level3", "Level4", "Level5"
    // };

    private bool isNavbarCollapsed = true;
    private string navbarCollapseCss => isNavbarCollapsed ? "collapse navbar-collapse" : "navbar-collapse";

    private string addDropdownDisplay = "none";
    private string subtractDropdownDisplay = "none";
    private string multiplyDropdownDisplay = "none";
    private string divideDropdownDisplay = "none";
    private string mixed4OpsDropdownDisplay = "none";

    private bool isAddDropdownOpen = false;
    private bool isSubtractDropdownOpen = false;
    private bool isMultiplyDropdownOpen = false;
    private bool isDivideDropdownOpen = false;
    private bool isMixed4OpsDropdownOpen = false;

    private string addMissingDropdownDisplay = "none";
    private string subtractMissingDropdownDisplay = "none";
    private string multiplyMissingDropdownDisplay = "none";
    private string divideMissingDropdownDisplay = "none";

    private bool isAddMissingDropdownOpen = false;
    private bool isSubtractMissingDropdownOpen = false;
    private bool isMultiplyMissingDropdownOpen = false;
    private bool isDivideMissingDropdownOpen = false;



    private string ClickedMenuItem = "";

    private int _upperRange = 10;
    [Parameter]
    public int UpperRange
    {
        get { return _upperRange; }
        set
        {
            _upperRange = value;
        }
    }

    private int _lowerRange = 0;
    [Parameter]
    public int LowerRange
    {
        get { return _lowerRange; }
        set
        {
            _lowerRange = value;
        }
    }

    private string _operator = "Add";
    [Parameter]
    public string Operator
    {
        get { return _operator; }
        set
        {
            _operator = value;
        }
    }

    private string _selectedItem = "Add";
    [Parameter]
    public string SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
        }
    }

    [Parameter]
    public EventCallback<string> OperatorChanged { get; set; }
    [Parameter]
    public EventCallback<int> UpperRangeChanged { get; set; }
    [Parameter]
    public EventCallback<int> LowerRangeChanged { get; set; }
    [Parameter]
    public EventCallback<string> SelectedItemChanged { get; set; }

    [Parameter]
    public EventCallback ParametersChanged { get; set; }


    private void ToggleNavbar()
    {
        isNavbarCollapsed = !isNavbarCollapsed;
    }

    private async void ToggleDropdown(string _operator)
    {
        Operator = _operator;
        // await OperatorChanged.InvokeAsync(Operator);
        switch (_operator)
        {
            case "Add":
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;

                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isAddDropdownOpen = !isAddDropdownOpen;
                addDropdownDisplay = isAddDropdownOpen ? "block" : "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";
                break;

            case "Add Missing":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";
                isAddMissingDropdownOpen = !isAddMissingDropdownOpen;
                addMissingDropdownDisplay = isAddMissingDropdownOpen ? "block" : "none";
                break;

            case "Subtract":
                isAddDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isSubtractDropdownOpen = !isSubtractDropdownOpen;
                subtractDropdownDisplay = isSubtractDropdownOpen ? "block" : "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";
                break;

            case "Subtract Missing":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isSubtractMissingDropdownOpen = !isSubtractMissingDropdownOpen;
                subtractMissingDropdownDisplay = isSubtractMissingDropdownOpen ? "block" : "none";

                isAddMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";


                break;

            case "Multiply":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isMultiplyDropdownOpen = !isMultiplyDropdownOpen;
                multiplyDropdownDisplay = isMultiplyDropdownOpen ? "block" : "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";
                break;

            case "Multiply Missing":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";
                isMultiplyMissingDropdownOpen = !isMultiplyMissingDropdownOpen;
                multiplyMissingDropdownDisplay = isMultiplyMissingDropdownOpen ? "block" : "none";
                break;

            case "Divide":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isDivideDropdownOpen = !isDivideDropdownOpen;
                divideDropdownDisplay = isDivideDropdownOpen ? "block" : "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";

                break;

            case "Divide Missing":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                isMixed4OpsDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";
                mixed4OpsDropdownDisplay = "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";

                isDivideMissingDropdownOpen = !isDivideMissingDropdownOpen;
                divideMissingDropdownDisplay = isDivideMissingDropdownOpen ? "block" : "none";
                break;

            case "Mixed4Ops":
                isAddDropdownOpen = false;
                isSubtractDropdownOpen = false;
                isMultiplyDropdownOpen = false;
                isDivideDropdownOpen = false;
                addDropdownDisplay = "none";
                subtractDropdownDisplay = "none";
                multiplyDropdownDisplay = "none";
                divideDropdownDisplay = "none";

                isAddMissingDropdownOpen = false;
                isSubtractMissingDropdownOpen = false;
                isMultiplyMissingDropdownOpen = false;
                isDivideMissingDropdownOpen = false;
                addMissingDropdownDisplay = "none";
                subtractMissingDropdownDisplay = "none";
                multiplyMissingDropdownDisplay = "none";
                divideMissingDropdownDisplay = "none";

                isMixed4OpsDropdownOpen = !isMixed4OpsDropdownOpen;
                mixed4OpsDropdownDisplay = isMixed4OpsDropdownOpen ? "block" : "none";
                break;
        }
    }

    private void OpenDropdown(string dropdown)
    {
        isAddDropdownOpen = true;
        addDropdownDisplay = isAddDropdownOpen ? "block" : "none";
    }

    private void CloseDropdown(string dropdown)
    {
        isAddDropdownOpen = false;
        addDropdownDisplay = isAddDropdownOpen ? "block" : "none";
    }

    private async void HandleDropdownItemClick(string item, string _operator)
    {
        // Process the click event for the selected item
        // You can perform any logic here based on the selected item

        ClickedMenuItem = item;
        Operator = _operator;
        SelectedItem = item;
        int parsedInt;
        switch (_operator)
        {
            case "Add":

                switch (item)
                {
                    case "0-5":
                        LowerRange = 0;
                        UpperRange = 5;
                        break;
                    case "0-10":
                        LowerRange = 0;
                        UpperRange = 10;
                        break;
                    case "Number Bond for 10":
                        LowerRange = 1111;
                        UpperRange = 10;
                        break;
                    case "0-20":
                        LowerRange = 0;
                        UpperRange = 20;
                        break;
                    case "Number Bond for 20":
                        LowerRange = 2222;
                        UpperRange = 20;
                        break;
                    case "10-50":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "10-100":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "100-1000":
                        LowerRange = 100;
                        UpperRange = 1000;
                        break;
                    case "1000-10000":
                        LowerRange = 1000;
                        UpperRange = 10000;
                        break;
                }
                break;

            case "Subtract":
                switch (item)
                {
                    case "0-5":
                        LowerRange = 0;
                        UpperRange = 5;
                        break;
                    case "0-10":
                        LowerRange = 0;
                        UpperRange = 10;
                        break;
                    case "Subtract from 10":
                        LowerRange = 5555;
                        UpperRange = 10;
                        break;
                    case "0-20":
                        LowerRange = 0;
                        UpperRange = 20;
                        break;
                    case "Subtract from 20":
                        LowerRange = 6666;
                        UpperRange = 10;
                        break;
                    case "10-50":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "10-100":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "100-1000":
                        LowerRange = 100;
                        UpperRange = 1000;
                        break;
                    case "1000-10000":
                        LowerRange = 1000;
                        UpperRange = 10000;
                        break;
                }
                break;

            case "Multiply":
                if (int.TryParse(ClickedMenuItem, out int parsedUpperRangeMultiply))
                {
                    // Conversion successful, use the 'number' variable
                    LowerRange = parsedUpperRangeMultiply;
                    UpperRange = 12;
                }
                else
                {
                    // Conversion failed
                    LowerRange = 0;
                    parsedUpperRangeMultiply = 0;
                }
                break;

            case "Divide":
                if (int.TryParse(ClickedMenuItem, out int parsedUpperRangeDivide))
                {
                    // Conversion successful, use the 'number' variable
                    LowerRange = parsedUpperRangeDivide;
                    UpperRange = 12;
                }
                else
                {
                    // Conversion failed
                    LowerRange = 1;
                    parsedUpperRangeDivide = 1;
                }
                break;

            case "Add Missing":

                switch (item)
                {
                    case "0-5":
                        LowerRange = 0;
                        UpperRange = 5;
                        break;
                    case "0-10":
                        LowerRange = 0;
                        UpperRange = 10;
                        break;
                    case "Number Bond for 10":
                        LowerRange = 1111;
                        UpperRange = 10;
                        break;
                    case "0-20":
                        LowerRange = 0;
                        UpperRange = 20;
                        break;
                    case "Number Bond for 20":
                        LowerRange = 2222;
                        UpperRange = 20;
                        break;
                    case "10-50":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "10-100":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "100-1000":
                        LowerRange = 100;
                        UpperRange = 1000;
                        break;
                    case "1000-10000":
                        LowerRange = 1000;
                        UpperRange = 10000;
                        break;
                }
                // Operator = "Add";
                break;

            case "Subtract Missing":
                switch (item)
                {
                    case "0-5":
                        LowerRange = 0;
                        UpperRange = 5;
                        break;
                    case "0-10":
                        LowerRange = 0;
                        UpperRange = 10;
                        break;
                    case "Subtract from 10":
                        LowerRange = 5555;
                        UpperRange = 10;
                        break;
                    case "0-20":
                        LowerRange = 0;
                        UpperRange = 20;
                        break;
                    case "Subtract from 20":
                        LowerRange = 6666;
                        UpperRange = 10;
                        break;
                    case "10-50":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "10-100":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "100-1000":
                        LowerRange = 100;
                        UpperRange = 1000;
                        break;
                    case "1000-10000":
                        LowerRange = 1000;
                        UpperRange = 10000;
                        break;
                }
                // Operator = "Subtract";
                break;

            case "Multiply Missing":
                if (int.TryParse(ClickedMenuItem, out int parsedUpperRangeMultiplyMissing))
                {
                    // Conversion successful, use the 'number' variable
                    LowerRange = parsedUpperRangeMultiplyMissing;
                    UpperRange = 12;
                }
                else
                {
                    // Conversion failed
                    LowerRange = 0;
                    parsedUpperRangeMultiplyMissing = 0;
                }
                // Operator = "Multiply";
                break;

            case "Divide Missing":
                if (int.TryParse(ClickedMenuItem, out int parsedUpperRangeDivideMissing))
                {
                    // Conversion successful, use the 'number' variable
                    LowerRange = parsedUpperRangeDivideMissing;
                    UpperRange = 12;
                }
                else
                {
                    // Conversion failed
                    LowerRange = 1;
                    parsedUpperRangeDivideMissing = 1;
                }
                // Operator = "Divide";
                break;

            case "Mixed4Ops":
                switch (item)
                {
                    case "Level1":
                        LowerRange = 1234; // indictes Level1
                        UpperRange = 5;
                        break;
                    case "Level2":
                        LowerRange = 1235; // indictes Level2
                        UpperRange = 10;
                        break;
                    case "Level3":
                        LowerRange = 1236; // indictes Level3
                        UpperRange = 20;
                        break;
                    case "Level4":
                        LowerRange = 1237; // indictes Level4
                        UpperRange = 50;
                        break;
                    case "Level5":
                        LowerRange = 1238; // indictes Level5
                        UpperRange = 100;
                        break;
                }
                // Operator = randomOperation;

                break;
        }

        
        
        await UpperRangeChanged.InvokeAsync(UpperRange);
        await LowerRangeChanged.InvokeAsync(LowerRange);
        await OperatorChanged.InvokeAsync(Operator);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
        await ParametersChanged.InvokeAsync();

        // Close the dropdown after the item is clicked, if desired
        CloseAllDropdowns();
    }
 
    public void CloseAllDropdowns()
    {
        isAddDropdownOpen = false;
        isSubtractDropdownOpen = false;
        isMultiplyDropdownOpen = false;
        isDivideDropdownOpen = false;
        isMixed4OpsDropdownOpen = false;

        addDropdownDisplay = "none";
        subtractDropdownDisplay = "none";
        multiplyDropdownDisplay = "none";
        divideDropdownDisplay = "none";
        mixed4OpsDropdownDisplay = "none";

        isAddMissingDropdownOpen = false;
        isSubtractMissingDropdownOpen = false;
        isMultiplyMissingDropdownOpen = false;
        isDivideMissingDropdownOpen = false;

        addMissingDropdownDisplay = "none";
        subtractMissingDropdownDisplay = "none";
        multiplyMissingDropdownDisplay = "none";
        divideMissingDropdownDisplay = "none";
    }

}
