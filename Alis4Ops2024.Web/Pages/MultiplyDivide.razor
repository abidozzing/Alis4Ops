@page "/multiplydivide"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Alis4Ops2024.Web.Pages
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.WebUtilities
@inject RefreshService RefreshService
@inject NavigationManager NavigationHelper
<link href="css/site.css" rel="stylesheet" />
<link href="css/dropbutton.css" rel="stylesheet" />


<PageTitle>MultiplyDivide</PageTitle>
@* <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" /> *@

<div class="container col-12">
    <div class="row gx-0 align-items-center" style="font-size: 60%;">
        <div class="col-auto">
            <MultiplyRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange
                               @bind-Operator=@Operator @bind-SelectedItem=@SelectedItem
                               @bind-Topic=@Topic ParametersChanged="GenerateNewQuestion" />
        </div>

        @*         <div class="col-auto">
        <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
        <Date />
        </div>
        </div> *@
        <div class="col-auto ms-auto">
            <!-- Right aligned content -->
            <SubmitButton SubmitAnswer="HandleSubmitAnswerAsync" @ref="submitButton" />
        </div>
    </div>

    <div>
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
    </div>



    @if (Operator == "Multiply")
    {
        <div>
            <MathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer @ref="mathQuiz" />
        </div>
        <div>
            <MultiplyModel Question="@Question" />
        </div>
    }
    else
    {
        <div>
            <DivideMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer @ref="divideMathQuiz" />
        </div>
        <div>
            <DivideModel Question="@Question" />
        </div>
    }
</div>


@code {

    private Random random = new Random();
    [Inject] private IMultiplyQuestionGeneratorService MultiplyQuestionGenerator { get; set; }
    [Inject] private IDivideQuestionGeneratorService DivideQuestionGenerator { get; set; }
    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }
    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component
    private MathQuiz mathQuiz; // Reference to child component
    private DivideMathQuiz divideMathQuiz; // Reference to child component
    private SubmitButton submitButton;
    [Parameter] public EventCallback SubmitAnswer { get; set; }

    private int _upperRange = 12;
    [Parameter]
    public int UpperRange
    { get { return _upperRange; } set { _upperRange = value; } }

    private int _lowerRange = 1;
    [Parameter]
    public int LowerRange
    { get { return _lowerRange; } set { _lowerRange = value; } }

    private string _operator = "Multiply";
    [Parameter]
    public string Operator
    { get { return _operator; } set { _operator = value; } }

    private string _selectedItem = "1";
    [Parameter]
    public string SelectedItem
    { get { return _selectedItem; } set { _selectedItem = value; } }

    private string _topic = "MultiplyDivide";
    [Parameter]
    public string Topic
    { get { return _topic; } set { _topic = value; } }

    private int Num { get; set; } = 0;

    protected override void OnInitialized()
    {
    //     var uri = NavigationHelper.ToAbsoluteUri
    // (NavigationHelper.Uri);

    //     if (QueryHelpers.ParseQuery(uri.Query).
    // TryGetValue("Topic", out var navTopic))

        if (dateTimeCounterStopWatch is null)
        {
            dateTimeCounterStopWatch = new DateTimeCounterStopWatch();
            submitButton = new SubmitButton();
            mathQuiz = new MathQuiz();
            divideMathQuiz = new DivideMathQuiz();
        }
        SelectOperator();
        GenerateNewQuestion();
    }

    private void SelectOperator()
    {
        Topic = "MultiplyDivide";
        Operator = "Multiply";
        UpperRange = 12;
        LowerRange = 1;
        SelectedItem = "1";

        Num = random.Next(2);
        switch (Num)
        {
            case 0:
                // mathQuiz = new MathQuiz();
                Operator = "Multiply";
                break;
            case 1:
                // divideMathQuiz = new DivideMathQuiz();
                Operator = "Divide";
                break;
            default:
                // Handle unexpected cases if necessary
                Topic = "MultiplyDivide";
                Operator = "Multiply";
                LowerRange = 1;
                UpperRange = 5;
                SelectedItem = "Level 1";
                break;
        }
    }

    async Task HandleSubmitAnswerAsync()
    {
        @if (Operator == "Multiply")
        {
            await mathQuiz.inputElement.FocusAsync();

            // Assuming HandleKeydown method doesn't return a Task and doesn't need await
            mathQuiz.HandleKeydown(new KeyboardEventArgs { Key = "Enter" });
        }
        else
        {
            await divideMathQuiz.inputElement.FocusAsync();

            // Assuming HandleKeydown method doesn't return a Task and doesn't need await
            divideMathQuiz.HandleKeydown(new KeyboardEventArgs { Key = "Enter" });
        }
    }

    private async Task HandleAnsweredCorrectly()
    {
        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.ResetAndStartStopwatch();
            await dateTimeCounterStopWatch.IncrementCounter();
            await AnsweredCorrectly.InvokeAsync();
            SelectOperator();
            GenerateNewQuestion();
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private async Task HandleAnsweredWrongly()
    {

        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.IncrementErrorCount();
            // await AnsweredWrongly.InvokeAsync();
        }
    }

    private void GenerateNewQuestion()
    {
        Num = random.Next(2);
        if (Num == 0)
        {
            Operator = "Multiply";
            Question = MultiplyQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
        }
        else
        {
            Operator = "Divide";
            Question = DivideQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
        }
    }
}





