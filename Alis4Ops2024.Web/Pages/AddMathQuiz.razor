@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@using System
<link href="css/site.css" rel="stylesheet" />
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>AddMathQuiz</PageTitle>

@* @if (i == "")
{
    <div style="font-size: 60%;">
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
    </div>
} *@

@if (Question != null && (Question.InputPosition <= 0 || Question.InputPosition > 3))
{
    Question.InputPosition = 3;
}

@switch (Question.InputPosition)
{
    case 1:
        <div class="row  gx-0">
            <!-- Message Good Job! or Please try again. -->
            <div class="col-12 p-1 d-flex text-dark justify-content-center align-items-center" style="height: 30px; box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!--  Add Operand1 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@displayedValue</div>
        </div>

        <!-- Add Operator Symbol and Operand2 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@Question.OperatorAsSymbol @Question.Operand2</div>
        </div>


        <div class="row gx-0" style="padding:0px;">
            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" id="AnswerNumber" pattern="[0-9]*" type="number" placeholder="?" style="background-color: lightgreen;  color: mediumblue; font-weight: bold; text-align: center; align-content: center; border: 0;" @bind-value="userInput" @oninput="HandleInput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-end align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>
        </div>
        break;

    case 2:
        <div class="row  gx-0">
            <!-- Message Good Job! or Please try again. -->
            <div class="col-12 p-1 d-flex text-dark justify-content-center align-items-center" style="height: 30px; box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!--  Add Operand1 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@Question.Operand1</div>
        </div>

        <!-- Add Operator Symbol and Operand2 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@Question.OperatorAsSymbol @displayedValue </div>
        </div>

        <div class="row gx-0" style="padding:0px;">
            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" id="AnswerNumber" pattern="[0-9]*" type="number" placeholder="?" style="background-color: lightgreen; color:mediumblue; font-weight: bold; text-align: center; align-content: center;  border: 0" @bind-value="userInput" @oninput="HandleInput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-end align-items-end text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>
        </div>
        break;

    case 3:
        <!-- Result Message - Message Good Job! or Please try again. -->
        <div class="row  gx-0">
            <div class="col-12 p-1 d-flex text-dark justify-content-center align-items-center" style="height: 30px; box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!-- Add Operand1 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@Question.Operand1</div>
        </div>

        <!-- Add Operator Symbol and Operand2 Vertical -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 d-flex text-dark" style=" justify-content: flex-end; box-sizing: border-box;">@Question.OperatorAsSymbol @Question.Operand2</div>
        </div>

        <div class="row gx-0" style="padding:0px; box-sizing: border-box;">
            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" id="AnswerNumber" pattern="[0-9]*" type="number" placeholder="?" style="background-color: lightgreen; color:mediumblue; font-weight: bold; text-align: right; border: 0;  border: 2px solid green;" @bind-value="userInput" @bind-value:event="oninput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>
        </div>


        break;
}

<style>
    /* Remove spinner buttons for number inputs in WebKit browsers */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>

@code {
    // string i = "";
    // private bool isFirstRender = true; // Flag to track first render
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender && isFirstRender)
    //     {
    //         i = "1"; // Set `i` to "1" after the first render
    //         isFirstRender = false; // Update flag to indicate first render is completed
    //     }
    // }

    private string displayedValue = "?"; // Displayed value synced with user input

    private async Task HandleInput(ChangeEventArgs args)
    {
        userInput = args.Value?.ToString(); // Update userInput from event args
        displayedValue = userInput; // Sync displayed value with userInput

        await InvokeAsync(() => StateHasChanged()); // Refresh UI after input change
    }


    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }
    [Parameter] public EventCallback GenerateNewQuestion { get; set; }
    [Parameter] public int Answer { get; set; }
    private ElementReference inputElement;

    // private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component

    // protected override void OnInitialized()
    // {
    //     if (dateTimeCounterStopWatch is null)
    //     {
    //         dateTimeCounterStopWatch = new DateTimeCounterStopWatch();
    //     }
    //     GenerateNewQuestion.InvokeAsync();
    // }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        inputElement.FocusAsync();
    }


    private string? userInput = "";
    private bool showResult;
    private string resultMessage = "";
    private string resultColor = "White";

    private async Task HandleKeydown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            // Retrieve current input value
            userInput = userInput.Trim(); // Trim any leading or trailing whitespace
            int parsedInput;

            // Check if userInput is numeric
            if (!int.TryParse(userInput, out parsedInput))
            {
                // If userInput is not numeric, select the input text and return
                await JSRuntime.InvokeVoidAsync("eval", "document.activeElement.select();");
                return;
            }

            // Now we know userInput is numeric, proceed with the comparison
            if (parsedInput == Question.Answer)
            {

                resultMessage = "Good Job!";
                resultColor = "green";
                await Task.Delay(500);
                userInput = ""; // Clear input after correct answer
                resultMessage = "";
                resultColor = "white"; // Reset color
                displayedValue = "?";
                // await dateTimeCounterStopWatch.ResetAndStartStopwatch();
                // await dateTimeCounterStopWatch.IncrementCounter();
                await AnsweredCorrectly.InvokeAsync();
            }
            else
            {
                resultMessage = "Please Try Again.";
                resultColor = "red";
                await JSRuntime.InvokeVoidAsync("eval", "document.activeElement.select()");
                // await dateTimeCounterStopWatch.IncrementErrorCount();
                await AnsweredWrongly.InvokeAsync();
            }

            showResult = true;
            await InvokeAsync(() => StateHasChanged());
        }
        // else
        // {
        //     // Method to update displayedValue synchronously with userInput
        //     displayedValue = displayedValue + args.Key; // Optionally, manipulate or format the value as needed
        //     StateHasChanged();
        // }


    }
}

