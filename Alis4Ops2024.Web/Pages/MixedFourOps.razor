@page "/mixedfourops"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using System
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<link href="css/site.css" rel="stylesheet" />

@* @switch (selectedItem)

{

    case "Add":
        break;

    case "Add-Missing":
        break;

    case "Subtract":
        break;

    case "Subtract-Missing":
        break;

    case "Multiply":
        break;

    case "Multiply-Missing":
        break;

    case "Divide":
        break;

    case "Divide-Missing":
        break;

    case "Add:Subtract":
        break;

    case "Multiply:Divide":
        break;

    case "MissingFourOps":
        break;

} *@

<PageTitle>Add</PageTitle>

<div class="container col-12">


    @if (Num == 0)
    {
        <div>
            <Add AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Add-Missing" LowerRange="1" UpperRange="20" />
        </div>
    }
    else if (Num == 1)
    {
        <div>
            <Subtract AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Subtract-Missing" LowerRange="1" UpperRange="20" />
        </div>
    }
    else if (Num == 2)
    {
        <div>
            <Multiply AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Multiply-Missing" LowerRange="1" UpperRange="12" />
        </div>
    }
    else if (Num == 3)
    {
        <div>
            <Divide AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Divide-Missing" LowerRange="1" UpperRange="12" />
        </div>
    }
    else
    {
        <div>
            <Add AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Add-Missing" LowerRange="1" UpperRange="20" />
        </div>
    }

</div>

@code {
    private Random random = new Random();

    private int Num { get; set; } = 0;

    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component

    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }

    protected override void OnInitialized()
    {
        GenerateNewQuestion();
    }


    private async Task HandleAnsweredWrongly()
    {

    }


    private void GenerateNewQuestion()
    {
        Num = random.Next(0, 4);
    }

}






