@page "/mixedfourops"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.WebUtilities
@inject RefreshService RefreshService
@inject NavigationManager NavigationHelper
<link href="css/site.css" rel="stylesheet" />
<link href="css/dropbutton.css" rel="stylesheet" />

<link href="css/site.css" rel="stylesheet" />
<link href="css/dropbutton.css" rel="stylesheet" />

<PageTitle>MixedFourOps</PageTitle>

<div class="container col-12">
    <div class="row gx-0 align-items-center" style="font-size: 60%;">
        <div class="col-auto">
            <MixedFourOpsRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                   @bind-SelectedItem=@SelectedItem @bind-Topic=@Topic ParametersChanged="GenerateNewQuestion" />
        </div>

        @*         <div class="col-auto">
        <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
        <Date />
        </div>
        </div> *@
        <div class="col-auto ms-auto">
            <!-- Right aligned content -->
            <SubmitButton SubmitAnswer="HandleSubmitAnswerAsync" @ref="submitButton" />
        </div>
    </div>

    <div>
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
    </div>

    @if (Operator == "Add" || Operator == "Subtract" || Operator == "Multiply")
    {
        <div>
            <MathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer @ref="mathQuiz" />
        </div>

        @if (Operator == "Add")
        {
            <div>
                <AddModel Question="@Question" />
            </div>
        }
        else if (Operator == "Subtract")
        {
            <div>
                <SubtractModel Question="@Question" />
            </div>

        }
        else if (Operator == "Multiply")
        {
            <div>
                <MultiplyModel Question="@Question" />
            </div>

        }
    }
    else
    {
        <div>
            <DivideMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer @ref="divideMathQuiz" />
        </div>
        <div>
            <DivideModel Question="@Question" />
        </div>
    }
</div>


@code {



    [Inject] private IAddQuestionGeneratorService AddQuestionGenerator { get; set; }
    [Inject] private ISubtractQuestionGeneratorService SubtractQuestionGenerator { get; set; }
    [Inject] private IMultiplyQuestionGeneratorService MultiplyQuestionGenerator { get; set; }
    [Inject] private IDivideQuestionGeneratorService DivideQuestionGenerator { get; set; }
    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }
    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component
    private MathQuiz mathQuiz; // Reference to child component
    private DivideMathQuiz divideMathQuiz; // Reference to child component
    private SubmitButton submitButton;
    [Parameter] public EventCallback SubmitAnswer { get; set; }

    [Parameter] public string topicSelected { get; set; }
    [Parameter] public string Topic { get; set; }
    [Parameter] public int UpperRange { get; set; }
    [Parameter] public int LowerRange { get; set; }
    [Parameter] public string Operator { get; set; }
    [Parameter] public string SelectedItem { get; set; }
    private int Num { get; set; } = 0;

    protected override void OnInitialized()
    {
    //     var uri = NavigationHelper.ToAbsoluteUri
    // (NavigationHelper.Uri);

    //     if (QueryHelpers.ParseQuery(uri.Query).
    // TryGetValue("Topic", out var navTopic))
            // Topic = "MixedFourOps";
            if (dateTimeCounterStopWatch is null)
            {
                dateTimeCounterStopWatch = new DateTimeCounterStopWatch();

            }

        mathQuiz = new MathQuiz();
        divideMathQuiz = new DivideMathQuiz();
        SelectOperator();
        SelectRange();
        // Generate new question based on Topic and Operator
        GenerateNewQuestion();

        // Notify Blazor to update the component's state
        StateHasChanged();
    }

    private void SelectOperator()
    {
        Topic = "MixedFourOps";
        Operator = "Add";
        UpperRange = 5;
        LowerRange = 1;
        SelectedItem = "Level 1";

        Num = random.Next(4);
        switch (Num)
        {
            case 0:
                mathQuiz = new MathQuiz();
                Operator = "Add";
                break;
            case 1:
                mathQuiz = new MathQuiz();
                Operator = "Subtract";
                break;
            case 2:
                mathQuiz = new MathQuiz();
                Operator = "Multiply";
                break;
            case 3:
                divideMathQuiz = new DivideMathQuiz();
                Operator = "Divide";
                break;
            default:
                // Handle unexpected cases if necessary
                Topic = "MixedFourOps";
                Operator = "Add";
                LowerRange = 1;
                UpperRange = 5;
                SelectedItem = "Level 1";

                break;
        }
    }
    private void SelectRange()
    {
        switch (SelectedItem)
        {
            case "Level 1":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Multiply":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Divide":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                }
                break;
            case "Level 2":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 10;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 10;
                        break;
                    case "Multiply":
                        LowerRange = 2;
                        UpperRange = 6;
                        break;
                    case "Divide":
                        LowerRange = 2;
                        UpperRange = 6;
                        break;
                }
                break;
            case "Level 3":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 20;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 20;
                        break;
                    case "Multiply":
                        LowerRange = 3;
                        UpperRange = 7;
                        break;
                    case "Divide":
                        LowerRange = 3;
                        UpperRange = 7;
                        break;
                }
                break;
            case "Level 4":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "Subtract":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "Multiply":
                        LowerRange = 4;
                        UpperRange = 10;
                        break;
                    case "Divide":
                        LowerRange = 4;
                        UpperRange = 10;
                        break;
                }
                break;
            case "Level 5":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "Subtract":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "Multiply":
                        LowerRange = 5;
                        UpperRange = 12;
                        break;
                    case "Divide":
                        LowerRange = 5;
                        UpperRange = 12;
                        break;
                }
                break;
            default:
                // Handle unexpected cases if necessary
                Topic = "MixedFourOps";
                Operator = "Add";
                LowerRange = 1;
                UpperRange = 5;
                SelectedItem = "Level 1";
                break;
        }
    }
    async Task HandleSubmitAnswerAsync()
    {
        @if (Operator == "Divide")
        {
            await divideMathQuiz.inputElement.FocusAsync();

            // Assuming HandleKeydown method doesn't return a Task and doesn't need await
            await divideMathQuiz.HandleKeydown(new KeyboardEventArgs { Key = "Enter" });
        }
        else
        {
            await mathQuiz.inputElement.FocusAsync();

            // Assuming HandleKeydown method doesn't return a Task and doesn't need await
            mathQuiz.HandleKeydown(new KeyboardEventArgs { Key = "Enter" });
        }
    }
    private Random random = new Random();

    private async Task HandleAnsweredCorrectly()
    {
        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.ResetAndStartStopwatch();
            await dateTimeCounterStopWatch.IncrementCounter();
            await AnsweredCorrectly.InvokeAsync();
            SelectOperator();
            SelectRange();
            GenerateNewQuestion();
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private async Task HandleAnsweredWrongly()
    {
        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.IncrementErrorCount();
            // await AnsweredWrongly.InvokeAsync();
        }
    }

    private void GenerateNewQuestion()
    {
        SelectOperator();
        switch (SelectedItem)
        {
            case "Level 1":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Multiply":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                    case "Divide":
                        LowerRange = 1;
                        UpperRange = 5;
                        break;
                }
                break;
            case "Level 2":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 10;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 10;
                        break;
                    case "Multiply":
                        LowerRange = 2;
                        UpperRange = 6;
                        break;
                    case "Divide":
                        LowerRange = 2;
                        UpperRange = 6;
                        break;
                }
                break;
            case "Level 3":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 1;
                        UpperRange = 20;
                        break;
                    case "Subtract":
                        LowerRange = 1;
                        UpperRange = 20;
                        break;
                    case "Multiply":
                        LowerRange = 3;
                        UpperRange = 7;
                        break;
                    case "Divide":
                        LowerRange = 3;
                        UpperRange = 7;
                        break;
                }
                break;
            case "Level 4":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "Subtract":
                        LowerRange = 10;
                        UpperRange = 50;
                        break;
                    case "Multiply":
                        LowerRange = 4;
                        UpperRange = 10;
                        break;
                    case "Divide":
                        LowerRange = 4;
                        UpperRange = 10;
                        break;
                }
                break;
            case "Level 5":
                switch (Operator)
                {
                    case "Add":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "Subtract":
                        LowerRange = 10;
                        UpperRange = 100;
                        break;
                    case "Multiply":
                        LowerRange = 5;
                        UpperRange = 12;
                        break;
                    case "Divide":
                        LowerRange = 5;
                        UpperRange = 12;
                        break;
                }
                break;
            default:
                // Handle unexpected cases if necessary
                Topic = "MixedFourOps";
                Operator = "Add";
                LowerRange = 1;
                UpperRange = 5;
                SelectedItem = "Level 1";
                break;
        }

        switch (Operator)
        {
            case "Add":
                Question = AddQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
                break;
            case "Subtract":
                Question = SubtractQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
                break;
            case "Multiply":
                Question = MultiplyQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
                break;
            case "Divide":
                Question = DivideQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem, Topic);
                break;
            // Handle additional cases as needed
            default:
                break;
        }
    }
}





