@page "/dividemathquiz"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@inject NavigationManager _navigationManager
<link href="css/site.css" rel="stylesheet" />
@using System


<PageTitle>DivideMathQuiz</PageTitle>

<title>Your Page Title</title>

<style>
    .model {
        display: flex;
        margin-bottom: 10px;
    }

    .box1 {
        border: 1px solid black;
        margin-top: 20px;
        margin-right: 0px;
        display: flex;
        /*align-items: center;*/
        justify-content: center;
        /* height: 30px; */
        /* Adjust box height as needed */
        background-color: beige; /* Set background color to beige */
    }

    .box2 {
        border: 1px solid black;
        margin-top: 20px;
        margin-right: 0px;
        display: flex;
        /* align-items: center; */
        justify-content: center;
        /* height: 30px; */
        /* Adjust box height as needed */
        background-color: bisque; /* Set background color to beige */
    }
</style>

@if (Question.InputPosition <= 0 || Question.InputPosition > 3)
{
    Question.InputPosition = 3;
}
@switch (Question.InputPosition)
{
    case 1:

        <div class="row  gx-0">
            <!-- Message Good Job! or Please try again. -->
            <div class="col-12 p-1 d-flex text-dark text-center"
                 style="--bs-gutter-x: 0; height: 30px; font-size: 24px;box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!-- Operand1 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class=" col-12 p-1 d-flex text-dark" style="height: 30px; justify-content: right; justify-content: right; align-content: end; align-items: flex-end; text-align: right; box-sizing: border-box;">?</div>
        </div>

        <!-- Operator Symbol and Operand2 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 p-1  d-flex text-dark" style="height: 30px; justify-content: right; align-content: end; align-items: center; text-align: right; box-sizing: border-box;">@Question.OperatorAsSymbol @Question.Operand2</div>
        </div>


        <div class="row gx-0" style="padding:0px;">
            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" style="background-color: lightgreen;  color: mediumblue; font-weight: bold; text-align: center; align-content: center; border: 0;" @bind-value="userInput" @bind-value:event="oninput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-end align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>
        </div>


        <!-- Box1 and Box2 Model-->
        <div class="row gx-0">
            <div class="d-flex">
                @if (Question.Operand1 != 0)
                {
                    <div class="box1" style="width: calc((@Question.Operand1 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        ?
                    </div>
                }
                @if (Question.Operand2 != 0)
                {
                    <div class="box2" style="width: calc((@Question.Operand2 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        @Question.Operand2
                    </div>
                }
            </div>
        </div>
        <div style="flex-flow: row nowrap; padding-top: 1rem">
            <div class="col-12 p-1 text-dark  justify-content-start align-item-start">
                <svg width="150" height="150">
                    <!-- Circle for the main number -->
                    <circle cx="35" cy="75" r="35" fill="yellow" />

                    <!-- Text for the main number -->
                    <text x="35" y="81" font-size="14" text-anchor="middle">@Question.Operand1</text>

                    <!-- Circle for the first addend (upper-right) -->
                    <circle cx="116" cy="25" r="25" fill="lightgreen" />

                    <!-- Text for the first addend -->
                    <text x="115" y="31" font-size="14" text-anchor="middle">?</text>

                    <!-- Circle for the second addend (lower-right) -->
                    <circle cx="116" cy="125" r="25" fill="lightskyblue" />

                    <!-- Text for the second addend -->
                    <text x="115" y="130" font-size="14" text-anchor="middle">@Question.Operand2</text>

                    <!-- Line connecting main number to first addend -->
                    <line x1="58" y1="53" x2="95" y2="34" stroke="black" stroke-width="2" />

                    <!-- Line connecting main number to second addend -->
                    <line x1="58" y1="98" x2="95" y2="114" stroke="black" stroke-width="2" />
                </svg>
            </div>
        </div>
        break;
    case 2:



        <div class="row  gx-0">
            <!-- Message Good Job! or Please try again. -->
            <div class="col-12 p-1 d-flex text-dark text-center"
                 style="--bs-gutter-x: 0; height: 30px; font-size: 24px;box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!-- Operand1 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class=" col-12 p-1 d-flex text-dark" style="height: 30px; justify-content: right; justify-content: right; align-content: end; align-items: flex-end; text-align: right;box-sizing: border-box;">@Question.Operand1</div>
        </div>

        <!-- Operator Symbol and Operand2 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 p-1  d-flex text-dark" style="height: 30px; justify-content: right; align-content: end; align-items: center; text-align: right;box-sizing: border-box;">@Question.OperatorAsSymbol ?</div>
        </div>

        <div class="row gx-0" style="padding:0px;">
            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" style="background-color: lightgreen; color:mediumblue; font-weight: bold; text-align: center; align-content: center;  border: 0" @bind-value="userInput" @bind-value:event="oninput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-end align-items-end text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>
        </div>


        <!-- Box1 and Box2 Model-->
        <div class="row gx-0">
            <div class="d-flex">
                @if (Question.Operand1 != 0)
                {
                    <div class="box1" style="width: calc((@Question.Operand1 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        @Question.Operand1
                    </div>
                }
                @if (Question.Operand2 != 0)
                {
                    <div class="box2" style="width: calc((@Question.Operand2 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        ?
                    </div>
                }
            </div>
        </div>
        <div style="flex-flow: row nowrap; padding-top: 1rem">
            <div class="col-12 p-1 text-dark  justify-content-start align-item-start">
                <svg width="150" height="150">
                    <!-- Circle for the UserInput -->
                    <circle cx="35" cy="75" r="35" fill="lightskyblue" />

                    <!-- Text for the UserInput -->
                    <text x="35" y="81" font-size="14" text-anchor="middle">@Question.Operand2</text>

                    <!-- Circle for the Operand1 (upper-right) -->
                    <circle cx="116" cy="25" r="25" fill="yellow" />

                    <!-- Text for the Operand1 -->
                    <text x="115" y="31" font-size="14" text-anchor="middle">@Question.Operand1</text>

                    <!-- Circle for the Operand2 (lower-right) -->
                    <circle cx="116" cy="125" r="25" fill="lightgreen" />

                    <!-- Text for the Operand2 -->
                    <text x="115" y="130" font-size="14" text-anchor="middle">?</text>

                    <!-- Line connecting UserInput to Operand1 -->
                    <line x1="58" y1="53" x2="95" y2="34" stroke="black" stroke-width="2" />

                    <!-- Line connecting UserInput to Operand2 -->
                    <line x1="58" y1="98" x2="95" y2="114" stroke="black" stroke-width="2" />
                </svg>
            </div>
        </div>
        break;

    case 3:

        <div class="row  gx-0">
            <!-- Message Good Job! or Please try again. -->
            <div class="col-12 p-1 d-flex text-dark text-center"
                 style="--bs-gutter-x: 0; height: 30px; font-size: 24px;box-sizing: border-box;">
                <div style="color: @resultColor;">@resultMessage</div>
            </div>
        </div>

        <!-- Operand1 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class=" col-12 p-1 d-flex text-dark" style="height: 30px; justify-content: right; justify-content: right; align-content: end; align-items: flex-end; text-align: right;box-sizing: border-box;">@Question.Operand1</div>
        </div>

        <!-- Operator Symbol and Operand2 Vertical Add -->
        <div class="row gx-0" style="padding:0px;">
            <div class="col-12 p-1 d-flex text-dark" style="height: 30px; justify-content: right; align-content: end; align-items: center; text-align: right;box-sizing: border-box;">@Question.OperatorAsSymbol @Question.Operand2</div>
        </div>

        <div class="row gx-0" style="padding:0px;">
            <!-- Operand1 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: yellow; ">
                <strong>@Question.Operand1</strong>
            </div>

            <!-- Switch case for Operator -->
            <div class="col p-1 bg-light d-flex justify-content-center align-items-center text-dark">
                @switch (Question.Operator)
                {
                    case "Add":
                        <i class="fa-solid fa-add"></i>
                        break;
                    case "Subtract":
                        <i class="fa-solid fa-minus"></i>
                        break;
                    case "Multiply":
                        <i class="fa-solid fa-times"></i>
                        break;
                    case "Divide":
                        <i class="fa-solid fa-divide"></i>
                        break;
                    default:
                        <strong>@Question.OperatorAsSymbol</strong>
                        break;
                }
            </div>

            <!-- Operand2 -->
            <div class="col-3 p-1 d-flex justify-content-center align-items-center text-dark" style="background-color: lightskyblue; text-align: center;">
                <strong>@Question.Operand2</strong>
            </div>

            <div class="col p-1 d-flex justify-content-center align-items-center text-dark" style="text-align: center;">
                <strong><i class="fa-solid fa-equals"></i></strong>
            </div>

            <!-- InputBox userInput -->
            <div class="col-3 d-flex text-dark">
                <input class="input-box" style="background-color: lightgreen; color:mediumblue; font-weight: bold; text-align: right; border: 0;  border: 2px solid green;" @bind-value="userInput" @bind-value:event="oninput" @onkeydown="HandleKeydown" @ref="inputElement" />
            </div>
        </div>


        <!-- Box1 and Box2 Model-->
        <div class="row gx-0">
            <div class="d-flex">
                @if (Question.Operand1 != 0)
                {
                    <div class="box1" style="width: calc((@Question.Operand1 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        @Question.Operand1
                    </div>
                }
                @if (Question.Operand2 != 0)
                {
                    <div class="box2" style="width: calc((@Question.Operand2 / (@Question.Operand1 + @Question.Operand2 + 0.01)) * 67%); text-align: center; align-items: center;">
                        @Question.Operand2
                    </div>
                }
            </div>
        </div>
        <div style="flex-flow: row nowrap; padding-top: 1rem">
            <div class="col-12 p-1 text-dark  justify-content-start align-item-start">
                <svg width="150" height="150">
                    <!-- Circle for the UserInput -->
                    <circle cx="35" cy="75" r="35" fill="lightgreen" />

                    <!-- Text for the UserInput -->
                    <text x="35" y="81" font-size="14" text-anchor="middle">?</text>

                    <!-- Circle for the Operand1 (upper-right) -->
                    <circle cx="116" cy="25" r="25" fill="yellow" />

                    <!-- Text for the Operand1 -->
                    <text x="115" y="31" font-size="14" text-anchor="middle">@Question.Operand1</text>

                    <!-- Circle for the Operand2 (lower-right) -->
                    <circle cx="116" cy="125" r="25" fill="lightskyblue" />

                    <!-- Text for the Operand2 -->
                    <text x="115" y="130" font-size="14" text-anchor="middle">@Question.Operand2</text>

                    <!-- Line connecting UserInput to Operand1 -->
                    <line x1="58" y1="53" x2="95" y2="34" stroke="black" stroke-width="2" />

                    <!-- Line connecting UserInput to Operand2 -->
                    <line x1="58" y1="98" x2="95" y2="114" stroke="black" stroke-width="2" />
                </svg>
            </div>
        </div>
        break;
}



@code {
    [Parameter]
    public int AnswerBond { get; set; }

    private Random random = new Random();
    private int addend1;
    private int addend2;

    protected override void OnInitialized()
    {
        CalculateAddends();
    }

    private void CalculateAddends()
    {

        addend1 = random.Next(0, 20 + 1);
        addend2 = random.Next(0, 20 + 1);
        AnswerBond = addend1 + addend2;
    }


    [Parameter]
    public BaseQuestion Question { get; set; }
    [Parameter]
    public EventCallback AnsweredCorrectly { get; set; }
    [Parameter]
    public int Answer { get; set; }
    private ElementReference inputElement;

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();

    //     // Initialize the Question property here
    //     Question = new BaseQuestion();
    //     //Question.Operator = "Add";
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        inputElement.FocusAsync();
        // }
    }
    // The key to binding is:
    // 1. @bind-value="userInput"
    // This means bind the value of the property called value

    // 2. @bind-value:event="oninput"
    // This means bind the

    //@bind-{HTMLElementPropertyName}="{variable}"
    private string? userInput = "";
    private bool showResult;
    private string resultMessage = "";
    private string resultColor = "White";

    [Inject]
    private IQuestionGeneratorService QuestionGenerator { get; set; }

    private async Task HandleKeydown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            int parsedInput;

            bool isNumeric = int.TryParse(userInput, out parsedInput);
            if (isNumeric && parsedInput == Question.Answer)
            {
                resultMessage = "Good Job!";
                resultColor = "green";
                await Task.Delay(500);
                userInput = "";
                resultMessage = "";
                resultColor = "white";
                await AnsweredCorrectly.InvokeAsync();

            }
            else
            {
                resultMessage = "Please Try Again.";
                resultColor = "red";
            }
            showResult = true;
            StateHasChanged();

        }
    }
}

