@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
<link href="css/dropbutton.css" rel="stylesheet" />
<link href="css/site.css" rel="stylesheet" />
@using System.Timers
@using System

<div class="dropdown">
    <!-- Added d-flex and align-items-center for vertical centering -->
    <button class="dropbtn" @onclick="ToggleDropdown">Add</button>
    <div class="dropdown-content" style="@dropdownStyle">
        @foreach (var item in MenuItems)
        {
            <a @onclick="(() => { HandleClickedItem(item); ToggleDropdown(); })">@item.Text</a>
        }
    </div>
</div>


@code {

    protected override async Task OnInitializedAsync()
    {
        // Update time every second
        while (true)
        {
            await Task.Delay(1000); // Delay for one second
            await InvokeAsync(() => StateHasChanged()); // Notify Blazor to re-render the UI
        }
    }


    protected override void OnInitialized()
    {
        SelectedMenuItem = MenuItems.FirstOrDefault(item => item.Text == "1-5");

    }

    public List<MenuItem> MenuItems { get; set; } = new List<MenuItem>
    {
        new MenuItem { Text = "1-5"},
        new MenuItem { Text = "1-10"},
        new MenuItem { Text = "1-20"},
        new MenuItem { Text = "10-50"},
        new MenuItem { Text = "10-100"},
        new MenuItem { Text = "100-1,000"},
        new MenuItem { Text = "Add-Missing"},
        new MenuItem { Text = "Make-5"},
        new MenuItem { Text = "Make-10"},
        new MenuItem { Text = "Make-20"},
        new MenuItem { Text = "Make-50"},
        new MenuItem { Text = "Make-100"}
    };

    private string dropdownStyle => isDropdownOpen ? "display: block;" : "display: none;";

    private bool isDropdownOpen = false;
    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    [Parameter] public EventCallback<string> OperatorChanged { get; set; }
    [Parameter] public EventCallback<int> UpperRangeChanged { get; set; }
    [Parameter] public EventCallback<int> LowerRangeChanged { get; set; }
    [Parameter] public EventCallback<string> SelectedItemChanged { get; set; }

    private string ClickedMenuItem = "";

    private int _upperRange = 5;
    [Parameter]
    public int UpperRange
    {
        get { return _upperRange; }
        set
        {
            _upperRange = value;
        }
    }

    private int _lowerRange = 1;
    [Parameter]
    public int LowerRange
    {
        get { return _lowerRange; }
        set
        {
            _lowerRange = value;
        }
    }

    private string _operator = "Add";
    [Parameter]
    public string Operator
    {
        get { return _operator; }
        set
        {
            _operator = value;
        }
    }

    private string _selectedItem = "1-5";
    [Parameter]
    public string SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
        }
    }


    public MenuItem SelectedMenuItem { get; set; } = null;

    void HandleClickedItem(MenuItem clickedItem)
    {
        SelectedMenuItem = clickedItem;

        Operator = "Add";
        SelectedItem = SelectedMenuItem.Text;
        switch (SelectedItem)
        {
            case "1-5":
                LowerRange = 1;
                UpperRange = 5;
                break;
            case "1-10":
                LowerRange = 1;
                UpperRange = 10;
                break;
            case "1-20":
                LowerRange = 1;
                UpperRange = 20;
                break;
            case "10-50":
                LowerRange = 10;
                UpperRange = 50;
                break;
            case "10-100":
                LowerRange = 10;
                UpperRange = 100;
                break;
            case "100-1,000":
                LowerRange = 100;
                UpperRange = 1000;
                break;
            case "Add-Missing":
                LowerRange = 1;
                UpperRange = 20;
                break;
            case "Make-5":
                LowerRange = 1;
                UpperRange = 5;
                break;
            case "Make-10":
                LowerRange = 1;
                UpperRange = 10;
                break;
            case "Make-20":
                LowerRange = 1;
                UpperRange = 20;
                break;
            case "Make-50":
                LowerRange = 10;
                UpperRange = 50;
                break;
            case "Make-100":
                LowerRange = 10;
                UpperRange = 100;
                break;
        }


        // Call the asynchronous method here
        _ = HandleParametersChangedAsync();

    }


    string GetItemClass(MenuItem item)
    {
        return item == SelectedMenuItem ? "selected" : "";
    }

    public class MenuItem
    {
        public string Text { get; set; }
    }



    [Parameter]
    public EventCallback ParametersChanged { get; set; }

    async Task HandleParametersChangedAsync()
    {
        await UpperRangeChanged.InvokeAsync(UpperRange);
        await LowerRangeChanged.InvokeAsync(LowerRange);
        await OperatorChanged.InvokeAsync(Operator);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
        await ParametersChanged.InvokeAsync();
    }


}

