@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout

<div class="topnav">
    @foreach (var item in MenuItems)
    {
        {
            <a @onclick="@(() => HandleClickedItem(item))" class="@GetItemClass(item)">@item.Text</a>
        }
    }
</div>

<p>ClickedItem: @SelectedMenuItem?.Text LowerRange:@LowerRange UpperRange:@UpperRange Operator:@Operator </p>

@code {

    protected override void OnInitialized()
    {
        SelectedMenuItem = MenuItems.FirstOrDefault(item => item.Text == "0-5");
    }

    public List<MenuItem> MenuItems { get; set; } = new List<MenuItem>
    {
        new MenuItem { Text = "0-5"},
        new MenuItem { Text = "0-10"},
        new MenuItem { Text = "Add-to-10"},
        new MenuItem { Text = "0-20"},
        new MenuItem { Text = "Add-to-20"},
        new MenuItem { Text = "10-50"},
        new MenuItem { Text = "10-100"},
        new MenuItem { Text = "100-1,000"},
        new MenuItem { Text = "Add-Missing"}

    };


    [Parameter]
    public EventCallback<string> OperatorChanged { get; set; }
    [Parameter]
    public EventCallback<int> UpperRangeChanged { get; set; }
    [Parameter]
    public EventCallback<int> LowerRangeChanged { get; set; }
    [Parameter]
    public EventCallback<string> SelectedItemChanged { get; set; }


    private string ClickedMenuItem = "";

    private int _upperRange = 5;
    [Parameter]
    public int UpperRange
    {
        get { return _upperRange; }
        set
        {
            _upperRange = value;
        }
    }

    private int _lowerRange = 0;
    [Parameter]
    public int LowerRange
    {
        get { return _lowerRange; }
        set
        {
            _lowerRange = value;
        }
    }

    private string _operator = "Add";
    [Parameter]
    public string Operator
    {
        get { return _operator; }
        set
        {
            _operator = value;
        }
    }

    private string _selectedItem = "0-5";
    [Parameter]
    public string SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
        }
    }


    public MenuItem SelectedMenuItem { get; set; } = null;

    void HandleClickedItem(MenuItem clickedItem)
    {
        SelectedMenuItem = clickedItem;

        Operator = "Add";
        SelectedItem = SelectedMenuItem.Text;
        switch (SelectedItem)
        {
            case "0-5":
                LowerRange = 0;
                UpperRange = 5;
                break;
            case "0-10":
                LowerRange = 0;
                UpperRange = 10;
                break;
            case "Add-to-10":
                LowerRange = 0;
                UpperRange = 10;
                break;
            case "0-20":
                LowerRange = 0;
                UpperRange = 20;
                break;
            case "Add-to-20":
                LowerRange = 0;
                UpperRange = 20;
                break;
            case "10-50":
                LowerRange = 10;
                UpperRange = 50;
                break;
            case "10-100":
                LowerRange = 10;
                UpperRange = 100;
                break;
            case "100-1,000":
                LowerRange = 100;
                UpperRange = 1000;
                break;
            case "Add-Missing":
                LowerRange = 0;
                UpperRange = 20;
                break;
        }

        // Call the asynchronous method here
        _ = HandleParametersChangedAsync();

    }   


    string GetItemClass(MenuItem item)
    {
        return item == SelectedMenuItem ? "selected" : "";
    }

    public class MenuItem
    {
        public string Text { get; set; }
    }



    [Parameter]
    public EventCallback ParametersChanged { get; set; }

    async Task HandleParametersChangedAsync()
    {
        await UpperRangeChanged.InvokeAsync(UpperRange);
        await LowerRangeChanged.InvokeAsync(LowerRange);
        await OperatorChanged.InvokeAsync(Operator);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
        await ParametersChanged.InvokeAsync();
    }


}

