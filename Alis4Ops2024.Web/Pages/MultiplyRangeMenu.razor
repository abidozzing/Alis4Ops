@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
<link href="css/site.css" rel="stylesheet" />
<link href="css/dropbutton.css" rel="stylesheet" />

<PageTitle>MultiplyRangeMenu</PageTitle>

        <div class="dropdown">
            <!-- Added d-flex and align-items-center for vertical centering -->
            <button class="dropbtn" @onclick="ToggleDropdown">Multiply: @SelectedItem</button>
            <div class="dropdown-content" style="@dropdownStyle">
                @foreach (var item in MenuItems)
                {
                    <a @onclick="(() => { HandleClickedItem(item); ToggleDropdown(); })">@item.Text</a>
                }
            </div>
        </div>

@code {

    protected override void OnInitialized()
    {
        SelectedMenuItem = MenuItems.FirstOrDefault(item => item.Text == "1");
    }

    public List<MenuItem> MenuItems { get; set; } = new List<MenuItem>
    {
        new MenuItem { Text = "1"},
        new MenuItem { Text = "2"},
        new MenuItem { Text = "3"},
        new MenuItem { Text = "4"},
        new MenuItem { Text = "5"},
        new MenuItem { Text = "6"},
        new MenuItem { Text = "7"},
        new MenuItem { Text = "8"},
        new MenuItem { Text = "9"},
        new MenuItem { Text = "10"},
        new MenuItem { Text = "11"},
        new MenuItem { Text = "12"},
    };

    private string dropdownStyle => isDropdownOpen ? "display: block;" : "display: none;";

    private bool isDropdownOpen = false;
    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    [Parameter]public EventCallback<string> OperatorChanged { get; set; }
    [Parameter]public EventCallback<int> UpperRangeChanged { get; set; }
    [Parameter]public EventCallback<int> LowerRangeChanged { get; set; }
    [Parameter]public EventCallback<string> SelectedItemChanged { get; set; }
    [Parameter] public EventCallback<string> TopicChanged { get; set; }

    private string ClickedMenuItem = "";

    private int _upperRange = 12;
    [Parameter]
    public int UpperRange
    {
        get { return _upperRange; }
        set
        {
            _upperRange = value;
        }
    }

    private int _lowerRange = 1;
    [Parameter]
    public int LowerRange
    {
        get { return _lowerRange; }
        set
        {
            _lowerRange = value;
        }
    }

    private string _operator = "Multiply";
    [Parameter]
    public string Operator
    {
        get { return _operator; }
        set
        {
            _operator = value;
        }
    }

    private string _selectedItem = "1";
    [Parameter]
    public string SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
        }
    }

    private string _topic = "Multiply";
    [Parameter]
    public string Topic
    {
        get { return _topic; }
        set
        {
            _topic = value;
        }
    }


    public MenuItem SelectedMenuItem { get; set; } = null;

    void HandleClickedItem(MenuItem clickedItem)
    {
        SelectedMenuItem = clickedItem;

        Operator = "Multiply";
        SelectedItem = SelectedMenuItem.Text;
        if (SelectedItem != null)
        {
            if (int.TryParse(SelectedItem, out int parsedUpperRangeMultiply))
            {
                // Conversion successful, use the 'number' variable
                LowerRange = parsedUpperRangeMultiply;
                UpperRange = 12;
            }
            else
            {
                // Conversion failed "Multiply-Missing"
                LowerRange = 1;
                parsedUpperRangeMultiply = 12;
            }
        }
        // Call the asynchronous method here
        _ = HandleParametersChangedAsync();

    }


    string GetItemClass(MenuItem item)
    {
        return item == SelectedMenuItem ? "selected" : "";
    }

    public class MenuItem
    {
        public string Text { get; set; }
    }



    [Parameter]
    public EventCallback ParametersChanged { get; set; }

    async Task HandleParametersChangedAsync()
    {
        await UpperRangeChanged.InvokeAsync(UpperRange);
        await LowerRangeChanged.InvokeAsync(LowerRange);
        await OperatorChanged.InvokeAsync(Operator);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
        await TopicChanged.InvokeAsync(SelectedItem);
        await ParametersChanged.InvokeAsync();
    }


}

