@page "/multiply"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Alis4Ops2024.Web.Pages
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
<link href="css/site.css" rel="stylesheet" />

<PageTitle>Multiply</PageTitle>
<div class="container col-12">
    <div>
        <MultiplyRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                           @bind-SelectedItem=@SelectedItem ParametersChanged="GenerateNewQuestion" />
    </div>

    <div>
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
    </div>

    <div>
        <MultiplyMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
    </div>

    <div>
        <MultiplyModel Question="@Question" />
    </div>

@*     <div>
        <NumberBondSvg Question="@Question" />
    </div> *@

@*     <div style="font-size: 16px;">
        Maths Sum: @Question.Operand1 @Question.OperatorAsSymbol @Question.Operand2 = @Question.Answer
    </div> *@
</div>




@code {

    [Inject] private IMultiplyQuestionGeneratorService QuestionGenerator { get; set; }
    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }

    private int _upperRange = 12;

    [Parameter]
    public int UpperRange
    {
        get { return _upperRange; }
        set { _upperRange = value; }
    }

    private int _lowerRange = 1;
    [Parameter]
    public int LowerRange
    {
        get { return _lowerRange; }
        set { _lowerRange = value; }
    }

    private string _operator = "Multiply";
    [Parameter]
    public string Operator
    {
        get { return _operator; }
        set { _operator = value; }
    }

    private string _selectedItem = "1";
    [Parameter]
    public string SelectedItem
    {
        get { return _selectedItem; }
        set { _selectedItem = value; }
    }

    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component

    protected override void OnInitialized()
    {
        if (dateTimeCounterStopWatch is null)
        {
            dateTimeCounterStopWatch = new DateTimeCounterStopWatch();
        }
        GenerateNewQuestion();
    }

    private async void HandleAnsweredCorrectly()
    {
        GenerateNewQuestion();
        await AnsweredCorrectly.InvokeAsync();
        dateTimeCounterStopWatch.ResetAndStartStopwatch();
        await dateTimeCounterStopWatch.IncrementCounter();
    }

    private async void HandleAnsweredWrongly()
    {
        await dateTimeCounterStopWatch.IncrementErrorCount();
    }

    private void GenerateNewQuestion()
    {
        if (Operator == null)
        {
            return;
        }
        Question = QuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
    }

    public void ReloadPage()
    {
        _navigationManager.NavigateTo($"Subtract", forceLoad: true);

    }
}
