@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Alis4Ops2024.Web.Pages
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Components

<!-- Index.razor -->
@* @page "/home/{topic}" *@

<h1>Main Page</h1>
<h2>Select Operation</h2>

@* Check if operation parameter is provided *@
@if (!string.IsNullOrEmpty(topic))
{
    <div>
        @* Use switch statement to handle different operations *@
        @switch (topic)
        {
            case "add":
                <p>Addition Component</p>
                <PageTitle>Add</PageTitle>

                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <AddRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                          @bind-SelectedItem=@SelectedItem ParametersChanged="AddGenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    <div style="font-size: 60%;">
                        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
                    </div>

                    <div>
                        <AddMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
                    </div>

                    <div>
                        <AddModel Question="@Question" />
                    </div>
                </div>
                break;
            case "subtract":
                <p>Subtraction Component</p>
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <SubtractRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                               @bind-SelectedItem=@SelectedItem ParametersChanged="SubtractGenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    <div style="font-size: 60%;">
                        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
                    </div>

                    <div>
                        <SubtractMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
                    </div>
                    <div>
                        <SubtractModel Question="@Question" />
                    </div>

                </div>
                break;
            case "multiply":
                <p>Multiplication Component</p>
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <MultiplyRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                               @bind-SelectedItem=@SelectedItem ParametersChanged="MultiplyGenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    <div style="font-size: 60%;">
                        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
                    </div>

                    <div>
                        <MultiplyMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
                    </div>

                    <div>
                        <MultiplyModel Question="@Question" />
                    </div>
                </div>
                break;
            case "divide":
                <p>Division Component</p>
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <DivideRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                             @bind-SelectedItem=@SelectedItem ParametersChanged="DivideGenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    <div style="font-size: 60%;">
                        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
                    </div>

                    <div>
                        <DivideMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
                    </div>

                    <div>
                        <DivideModel Question="@Question" />
                    </div>
                </div>
                break;
            case "addsubtract":
                <p>Subtraction Component</p>
                break;
            case "multiplydivide":
                <p>Multiplication Component</p>
                break;
            case "mixedfourops":
                <p>Division Component</p>
                break;
            default:
                <p>Invalid Operation: @topic</p>
                break;
        }
    </div>
}
@* else
{
    operation = "add";
} *@


@if (!string.IsNullOrEmpty(topic))
{
    <div>
        @switch (topic.ToLowerInvariant())
        {
            case "add":
                message = "Addition Component";
                UpperRange = 5;
                LowerRange = 1;
                Operator = "add";
                SelectedItem = "1-5";
                // Additional logic or components for Add operation
                break;
            case "subtract":
                message = "Subtraction Component";
                UpperRange = 5; // Example value, adjust as needed
                LowerRange = 1;
                Operator = "subtract";
                SelectedItem = "1-5";
                // Additional logic or components for Subtract operation
                break;
            case "multiply":
                message = "Multiplication Component";
                UpperRange = 12;
                LowerRange = 1;
                Operator = "multiply";
                SelectedItem = "1";
                // Additional logic or components for Multiply operation
                break;
            case "divide":
                message = "Division Component";
                UpperRange = 12; // Example value, adjust as needed
                LowerRange = 1;
                Operator = "divide";
                SelectedItem = "1";
                // Additional logic or components for Divide operation
                break;
            @*             case "addsubtract":
    message = "Subtraction Component";
    UpperRange = 5;
    LowerRange = 1;
    Operator = "add";
    SelectedItem = "1-5";
    // Additional logic or components for AddSubtract operation
    break;
    case "multiplydivide":
    message = "Multiplication Component";
    UpperRange = 12;
    LowerRange = 1;
    Operator = "multiply";
    SelectedItem = "12";
    // Additional logic or components for MultiplyDivide operation
    break;
    case "mixedfourops":
    message = "Division Component";
    UpperRange = 1000; // Example value, adjust as needed
    LowerRange = 100;
    Operator = "divide";
    SelectedItem = "100-1000";
    // Additional logic or components for MixedFourOps operation
    break; *@
            default:
                message = $"Invalid Operation: {topic}";
                break;
        }
    </div>
}
else
{
    message = "No operation selected. Defaulting to Addition Component.";
    topic = "add"; // Set default operation to "add"
    UpperRange = 5;
    LowerRange = 1;
    Operator = "add";
    SelectedItem = "1-5";
}

@code {

    // Inject services at the component level
    [Inject] private IAddQuestionGeneratorService AddQuestionGenerator { get; set; }
    [Inject] private ISubtractQuestionGeneratorService SubtractQuestionGenerator { get; set; }
    [Inject] private IMultiplyQuestionGeneratorService MultiplyQuestionGenerator { get; set; }
    [Inject] private IDivideQuestionGeneratorService DivideQuestionGenerator { get; set; }

    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }
    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component

    private string message;
    [Parameter] public string topic { get; set; }
    [Parameter] public int UpperRange { get; set; }
    [Parameter] public int LowerRange { get; set; }
    [Parameter] public string Operator { get; set; }
    [Parameter] public string SelectedItem { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(topic))
        {
            message = "No operation selected. Defaulting to Addition Component.";
            topic = "add"; // Set default operation to "add"
            UpperRange = 5;
            LowerRange = 1;
            Operator = "add";
            SelectedItem = "1-5";
        }

        if (dateTimeCounterStopWatch is null)
        {
            dateTimeCounterStopWatch = new DateTimeCounterStopWatch();
        }
        // GenerateNewQuestion();
    }

    private async Task HandleAnsweredCorrectly()
    {

        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.ResetAndStartStopwatch();
            await dateTimeCounterStopWatch.IncrementCounter();
            await AnsweredCorrectly.InvokeAsync();
            // GenerateNewQuestion();

        }

    }

    private async Task HandleAnsweredWrongly()
    {

        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.IncrementErrorCount();
            // await AnsweredWrongly.InvokeAsync();
        }
    }

    private void AddGenerateNewQuestion()
    {
        if (Operator == null)
        {
            return;
        }
        Question = AddQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
    }

    private void SubtractGenerateNewQuestion()
    {
        if (Operator == null)
        {
            return;
        }
        Question = SubtractQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
    }

    private void MultiplyGenerateNewQuestion()
    {
        if (Operator == null)
        {
            return;
        }
        Question = MultiplyQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
    }

    private void DivideGenerateNewQuestion()
    {
        if (Operator == null)
        {
            return;
        }
        Question = DivideQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
    }
}


