@page "/addsubtract"
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using System
<link href="css/site.css" rel="stylesheet" />

<PageTitle>Add:Subtract</PageTitle>
@* <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" /> *@

<div class="container col-12">

    @if (Num1 == 0)
    {
        Num1 = 1;
        <div>
            <Add AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Add-Missing" LowerRange="1" UpperRange="20" />
        </div>
    }
    else
    {
        Num1 = 0;
        <div>
            <Subtract AnsweredCorrectly="GenerateNewQuestion" AnsweredWrongly="HandleAnsweredWrongly" SelectedItem="Subtract-Missing" LowerRange="1" UpperRange="20" />
        </div>
    }

</div>

@code {

    private Random random = new Random();

    private int Num { get; set; } = 0;
    private int Num1 { get; set; } = 0;


    private DateTimeCounterStopWatch dateTimeCounterStopWatch; // Reference to child component

    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }

    protected override void OnInitialized()
    {
        GenerateNewQuestion();
    }

    private async Task HandleAnsweredCorrectly()
    {
        if (dateTimeCounterStopWatch != null)
        {
        // dateTimeCounterStopWatch.ResetAndStartStopwatch();
        // await dateTimeCounterStopWatch.IncrementCounter();
        // await AnsweredCorrectly.InvokeAsync();
        GenerateNewQuestion();
        }
    }

    private async Task HandleAnsweredWrongly()
    {
        // await AnsweredWrongly.InvokeAsync();
        // await dateTimeCounterStopWatch.IncrementErrorCount();
    }

    private void GenerateNewQuestion()
    {

        Num = random.Next(0, 2);
    }

}






