@page "/home/{topic}"
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Alis4Ops2024.Web.Core
@using Alis4Ops2024.Web.Models
@using Alis4Ops2024.Web.Layout
@using Alis4Ops2024.Web.Pages
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Components


@* <h1>Main Page</h1> *@
<h2>Selected Operation: @SelectedItem</h2>
<div style="font-size: 120%;">
    <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
</div>
@if (!string.IsNullOrEmpty(topic))
{

    <div>
        @switch (topic)
        {
            case "Add":
                @* <p>Addition Component</p> *@
                <PageTitle>Add</PageTitle>

                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <AddRangeMenu @bind-UpperRange=@UpperRange @bind-LowerRange=@LowerRange @bind-Operator=@Operator
                                          @bind-SelectedItem=@SelectedItem ParametersChanged="GenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    @* <div style="font-size: 60%;">
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
        </div> *@

                    <div>
                        <AddMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer=@Question.Answer />
                    </div>

                    <div>
                        <AddModel Question="@Question" />
                    </div>
                </div>
                break;
            case "Subtract":
                @* <p>Subtraction Component</p> *@
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <SubtractRangeMenu @bind-UpperRange="@UpperRange" @bind-LowerRange="@LowerRange" @bind-Operator="@Operator"
                                               @bind-SelectedItem="@SelectedItem" ParametersChanged="GenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    @*                     <div style="font-size: 60%;">
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
        </div> *@

                    <div>
                        <SubtractMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer="@Question.Answer" />
                    </div>
                    <div>
                        <SubtractModel Question="@Question" />
                    </div>

                </div>
                break;
            case "Multiply":
                @* <p>Multiplication Component</p> *@
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <MultiplyRangeMenu @bind-UpperRange="@UpperRange" @bind-LowerRange="@LowerRange" @bind-Operator="@Operator"
                                               @bind-SelectedItem="@SelectedItem" ParametersChanged="GenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    @*                     <div style="font-size: 60%;">
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
        </div> *@

                    <div>
                        <MultiplyMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer="@Question.Answer" />
                    </div>

                    <div>
                        <MultiplyModel Question="@Question" />
                    </div>
                </div>
                break;
            case "Divide":
                @* <p>Division Component</p> *@
                <div class="container col-12">
                    <div class="row gx-0 align-items-center" style="font-size: 60%;">
                        <div class="col-auto">
                            <DivideRangeMenu @bind-UpperRange="@UpperRange" @bind-LowerRange="@LowerRange" @bind-Operator="@Operator"
                                             @bind-SelectedItem="@SelectedItem" ParametersChanged="GenerateNewQuestion" />
                        </div>

                        <div class="col-auto">
                            <div class="d-flex align-items-center" style="margin-left: 15px; color:gray">
                                <Date />
                            </div>
                        </div>
                    </div>

                    @*                     <div style="font-size: 60%;">
        <DateTimeCounterStopWatch @ref="dateTimeCounterStopWatch" />
        </div> *@

                    <div>
                        <DivideMathQuiz Question="@Question" AnsweredCorrectly="HandleAnsweredCorrectly" AnsweredWrongly="HandleAnsweredWrongly" Answer="@Question.Answer" />
                    </div>

                    <div>
                        <DivideModel Question="@Question" />
                    </div>
                </div>
                break;
            case "AddSubtract":
                @* <p>Add Subtract Component</p> *@
                break;
            case "MultiplyDivide":
                @* <p>Multiply Divide Component</p> *@
                break;
            case "MixedFourOps":
                @* <p>Mixed Four Operations Component</p> *@
                break;
            default:
                @* <p>Invalid Operation: @topic</p> *@
                break;
        }
    </div>
}
else
{
    <p>No operation selected. Defaulting to Addition Component.</p>
    topic = "add"; // Set default operation to "add"
    UpperRange = 5;
    LowerRange = 1;
    Operator = "add";
    SelectedItem = "1-5";
}

@code {
    [Inject] private IAddQuestionGeneratorService AddQuestionGenerator { get; set; }
    [Inject] private ISubtractQuestionGeneratorService SubtractQuestionGenerator { get; set; }
    [Inject] private IMultiplyQuestionGeneratorService MultiplyQuestionGenerator { get; set; }
    [Inject] private IDivideQuestionGeneratorService DivideQuestionGenerator { get; set; }

    [Parameter] public BaseQuestion Question { get; set; }
    [Parameter] public EventCallback AnsweredCorrectly { get; set; }
    [Parameter] public EventCallback AnsweredWrongly { get; set; }
    private DateTimeCounterStopWatch dateTimeCounterStopWatch;

    private string message;
    [Parameter] public string topicSelected { get; set; }
    [Parameter] public string topic { get; set; }
    [Parameter] public int UpperRange { get; set; }
    [Parameter] public int LowerRange { get; set; }
    [Parameter] public string Operator { get; set; }
    [Parameter] public string SelectedItem { get; set; }


    public async Task SaveTopic()
    {
        await sessionStorage.SetItemAsync("topic", topic);
    }


    protected override void OnInitialized()
    {
        
        SaveTopic();

        if (string.IsNullOrEmpty(topic))
        {
            message = "No operation selected. Defaulting to Addition Component.";
            topic = "Add"; // Set default operation to "add"
        }

        // Set default values based on the default or selected topic
        SetDefaultValues(topic);

        if (dateTimeCounterStopWatch is null)
        {
            dateTimeCounterStopWatch = new DateTimeCounterStopWatch();
        }

        // Generate initial question based on default values
        GenerateNewQuestion();
    }

    private void SetDefaultValues(string selectedTopic)
    {
        switch (selectedTopic)
        {
            case "Add":
                message = "Addition Component";
                UpperRange = 5;
                LowerRange = 1;
                Operator = "Add";
                SelectedItem = "1-5";
                break;
            case "Subtract":
                message = "Subtraction Component";
                UpperRange = 5;
                LowerRange = 1;
                Operator = "Subtract";
                SelectedItem = "1-5";
                break;
            case "Multiply":
                message = "Multiplication Component";
                UpperRange = 12;
                LowerRange = 1;
                Operator = "Multiply";
                SelectedItem = "1";
                break;
            case "Divide":
                message = "Division Component";
                UpperRange = 12;
                LowerRange = 1;
                Operator = "Divide";
                SelectedItem = "1";
                break;
            case "AddSubtract":
                message = "Subtraction Component";
                UpperRange = 20;
                LowerRange = 1;
                
                Random AddSubtractRandom = new Random();
                topic = AddSubtractRandom.Next(2) == 0 ? "Add" : "Subtract";

                // Assign SelectedItem based on topic
                if (topic == "Add")
                {
                    SelectedItem = "Add-Missing";
                    Operator = "Add";
                }
                else if (topic == "Subtract")
                {
                    SelectedItem = "Subtract-Missing";
                    Operator = "Subtract";
                }
                break;
            case "MultiplyDivide":
                message = "Multiplication Component";
                UpperRange = 12;
                LowerRange = 1;

                Random MultiplyDivideRandom = new Random();
                topic = MultiplyDivideRandom.Next(2) == 0 ? "Multiply" : "Divide";

                // Assign SelectedItem based on topic
                if (topic == "Multiply")
                {
                    SelectedItem = "Multiply-Missing";
                    Operator = "Multiply";
                }
                else if (topic == "Divide")
                {
                    SelectedItem = "Divide-Missing";
                    Operator = "Divide";
                }
                break;
            case "MixedFourOps":
                message = "MixedFourOps Component";
                Random MixedFourOpsRandom = new Random();
                int mixedFourOpsRandom = MixedFourOpsRandom.Next(4);

                // Assign topic based on the random number generated
                switch (mixedFourOpsRandom)
                {
                    case 0:
                        topic = "Add";
                        UpperRange = 20;
                        LowerRange = 1;
                        SelectedItem = "Add-Missing";
                        Operator = "Add";
                        break;
                    case 1:
                        topic = "Subtract";
                        UpperRange = 20;
                        LowerRange = 1;
                        SelectedItem = "Subtract-Missing";
                        Operator = "Subtract";
                        break;
                    case 2:
                        topic = "Multiply";
                        UpperRange = 12;
                        LowerRange = 1;
                        SelectedItem = "Multiply-Missing";
                        Operator = "Multiply";
                        break;
                    case 3:
                        topic = "Divide";
                        UpperRange = 12;
                        LowerRange = 1;
                        SelectedItem = "Divide-Missing";
                        Operator = "Divide";
                        break;
                }
                break;
            default:
                message = $"Invalid Operation: {selectedTopic}";
                break;
        }
    }



    private async Task HandleAnsweredCorrectly()
    {
        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.ResetAndStartStopwatch();
            await dateTimeCounterStopWatch.IncrementCounter();
            await AnsweredCorrectly.InvokeAsync();

            // Generate new question after correct answer
            string topicValue = await GetTopicAsync();
            // Now you have the topicValue, which you can use in your application logic
            Console.WriteLine($"Retrieved topic value: {topicValue}");

            // Assign topic to a class-level variable or use it as needed
            topic = topicValue;
            SetDefaultValues(topic);

            GenerateNewQuestion();
        }
    }

    private async Task<string> GetTopicAsync()
    {
        var storedTopicValue = await sessionStorage.GetItemAsync<string>("topic");
        return storedTopicValue;
    }

    private async Task HandleAnsweredWrongly()
    {
        if (dateTimeCounterStopWatch != null)
        {
            await dateTimeCounterStopWatch.IncrementErrorCount();
            // await AnsweredWrongly.InvokeAsync();

            // Generate new question after wrong answer (optional)
            GenerateNewQuestion();
        }
    }

    private void GenerateNewQuestion()
    {
        switch (topic)
        {
            case "Add":
                Question = AddQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
                break;
            case "Subtract":
                Question = SubtractQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
                break;
            case "Multiply":
                Question = MultiplyQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
                break;
            case "Divide":
                Question = DivideQuestionGenerator.GenerateQuestion(UpperRange, LowerRange, Operator, SelectedItem);
                break;
            // Handle additional cases as needed
            default:
                break;
        }
    }
}
