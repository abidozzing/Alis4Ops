@using System.Timers
@using System
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<div class="row flex-nowrap gx-0" style="font-size: 45%;">

    <div class="col text-center">
        @currentDateTime
    </div>

    <div class="col text-center">
        Start: @startTimeStatic.ToString("hh:mm:ss tt")
    </div>

    <div class="col text-center">
        Session: @sessionTime.ToString("hh\\:mm\\:ss")
    </div>

    <div class="col text-center">
        Sums: @counterValue.ToString("D1")
    </div>

    <div class="col text-center">
        Right: @(counterValue - errorValue)
    </div>

    <div class="col text-center">
        Elapsed: @stopwatchTime
    </div>

    <div class="col text-center">
        @switch (counterValue)
        {
            case <= 0:
                <div>Score: </div>
                break;
            default:
                <div>Score: @(100 * (counterValue - errorValue) / counterValue)%</div>
                break;
        }
    </div>

</div>



@code {
    private bool isRunning = false;
    private Timer timer;
    private Timer sessionTimer; // Timer for session time
    private DateTime startTime;
    private DateTime startTimeStatic = DateTime.Now; // Static start time
    private TimeSpan elapsedTime;
    // private TimeSpan sessionTime; // Total session time
    private int rightSums;      // no. of correct sums
    private int inputValue;
    private bool WrongAnswerFlag = false;

    protected override async Task OnInitializedAsync()
    {
        counterValue = await GetCounterAsync();
        errorValue = await GetScoreAsync();
        startTimeStatic = await GetStartTimeStaticAsync();
        sessionTime = await GetSessionTimeAsync();
    }

    private async Task<int> GetCounterAsync()
    {
        var storedCounterValue = await sessionStorage.GetItemAsync<string>("counterValue");
        return string.IsNullOrEmpty(storedCounterValue) ? 0 : int.Parse(storedCounterValue);
    }

    private async Task<int> GetScoreAsync()
    {
        var storedErrorValue = await sessionStorage.GetItemAsync<string>("errorValue");
        return string.IsNullOrEmpty(storedErrorValue) ? 0 : int.Parse(storedErrorValue);
    }

    private async Task<DateTime> GetStartTimeStaticAsync()
    {
        var storedStartTimeStatic = await sessionStorage.GetItemAsync<string>("startTimeStatic");
        if (DateTime.TryParse(storedStartTimeStatic, out DateTime result))
        {
            return result;
        }
        return DateTime.Now; // Default value if parsing fails or stored value is empty
    }

    private async Task<TimeSpan> GetSessionTimeAsync()
    {
        var storedSessionTime = await sessionStorage.GetItemAsync<string>("sessionTime");
        if (TimeSpan.TryParse(storedSessionTime, out TimeSpan result))
        {
            return result;
        }
        return TimeSpan.Zero; // Default value if parsing fails or stored value is empty
    }

    public async Task IncrementCounter()
    {
        if (WrongAnswerFlag == true)
        {
            WrongAnswerFlag = false;
        }
        else
        {
            counterValue++;
            await sessionStorage.SetItemAsync("counterValue", counterValue.ToString());
        }
    }

    public async Task IncrementErrorCount()
    {
        if (WrongAnswerFlag == false)
        {
            WrongAnswerFlag = true;
            errorValue++;
            counterValue++;
            await sessionStorage.SetItemAsync("counterValue", counterValue.ToString());
            await sessionStorage.SetItemAsync("errorValue", errorValue.ToString());
            StateHasChanged();
        }
    }


    // Counter value received from parent component
    [Parameter] public int counterValue { get; set; }
    [Parameter] public int errorValue { get; set; }
    [Parameter] public TimeSpan sessionTime { get; set; }


    // Event callback to notify parent about counter value change
    [Parameter] public EventCallback<int> counterValueChanged { get; set; }

    private string currentDateTime => DateTime.Now.ToString("ddd dd MMM yyyy");
    private string stopwatchTime => $"{elapsedTime.Hours:D2}:{elapsedTime.Minutes:D2}:{elapsedTime.Seconds:D2}.{elapsedTime.Milliseconds / 100}";

    protected override void OnInitialized()
    {
        // Start the stopwatch initially
        ToggleTimer();

        // Start a timer to update currentDateTime every second
        var updateTimer = new Timer(1000); // Update every 1000 milliseconds (1 second)
        updateTimer.Elapsed += UpdateTimerElapsed;
        updateTimer.AutoReset = true;
        updateTimer.Start();

        // Start session timer
        sessionTimer = new Timer(1000); // Update every 1000 milliseconds (1 second)
        sessionTimer.Elapsed += SessionTimerElapsed;
        // sessionTimer.AutoReset = true;
        sessionTimer.Start();
    }

    private void UpdateTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Update currentDateTime every second
        InvokeAsync(() => StateHasChanged());
    }

    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (isRunning)
        {
            elapsedTime = DateTime.Now - startTime;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void SessionTimerElapsed(object sender, ElapsedEventArgs e)
    {
        sessionTime = DateTime.Now - startTimeStatic;
        InvokeAsync(() => StateHasChanged());
    }

    private void ToggleTimer()
    {
        if (!isRunning)
        {
            isRunning = true;
            startTime = DateTime.Now - elapsedTime;
            timer = new Timer(100); // Update every 100 milliseconds
            timer.Elapsed += TimerElapsed;
            timer.Start();
        }
        else
        {
            isRunning = false;
            timer.Stop();
        }
    }

    // Method to reset and start the stopwatch
    public void ResetAndStartStopwatch()
    {
        isRunning = false;
        elapsedTime = TimeSpan.Zero;
        startTime = DateTime.Now;
        ToggleTimer();
    }

    // Handle Enter key press from parent to reset and start stopwatch
    [JSInvokable]
    public async Task HandleEnterKeyPress()
    {
        ResetAndStartStopwatch();
        await InvokeAsync(() => StateHasChanged());
    }

    // Whenever counterValue changes from parent, update local state
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        StateHasChanged();
    }
}